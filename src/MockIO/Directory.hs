{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE PatternSynonyms   #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RankNTypes        #-}
{-# LANGUAGE TypeFamilies      #-}
{-# LANGUAGE UnicodeSyntax     #-}

module MockIO.Directory
  ( chdir, inDir, lsdir, lsdir', mkdir, mkpath, nuke )
where

import Base1T

-- base --------------------------------

import System.IO               ( FilePath )
import System.Posix.Types      ( FileMode )

-- directory ---------------------------

import System.Directory  ( listDirectory )

-- exceptions --------------------------

import Control.Monad.Catch  ( MonadCatch )

-- fpath -------------------------------

import FPath.AppendableFPath   ( AppendableFPath, AppendableFPathD
                               , AppendableFPathF, (‚´ª) )
import FPath.AsFilePath        ( AsFilePath( filepath ) )
import FPath.Dir               ( DirAs )
import FPath.DirType           ( DirType )
import FPath.Error.FPathError  ( AsFPathError )
import FPath.Parent            ( HasParentMay )
import FPath.Parseable         ( Parseable( parse ) )
import FPath.RelFile           ( RelFile )
import FPath.ToDir             ( ToDir )

-- fstat -------------------------------

import FStat  ( FStat )

-- log-plus ----------------------------

import Log  ( Log, logIO )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog, Severity( Warning ) )

-- mockio ------------------------------

import MockIO  ( DoMock( DoMock ) )

-- mockio-log --------------------------

import MockIO.Log      ( HasDoMock, doMock, logResult, mkIOL, mkIOLME, mkIOLMER)
import MockIO.IOClass  ( HasIOClass, IOClass( IORead, IOWrite ), ioClass )

-- monaderror-io -----------------------

import MonadError.IO.Error  ( IOError )

-- monadio-plus ------------------------

import qualified  MonadIO.Directory
import MonadIO.FStat  ( pathTypes )

-- safe --------------------------------

import Safe  ( succSafe )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import MockIO.FStat  ( lstats )

--------------------------------------------------------------------------------

{- | Change working directory. -}
chdir ‚à∑ ‚àÄ Œµ Œ¥ œâ Œº .
        (MonadIO Œº,
         AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
         MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ, HasDoMock œâ,
         DirAs Œ¥) ‚áí
        Severity -- ^ logging level
      ‚Üí Œ¥        -- ^ directory to change to
      ‚Üí DoMock   -- ^ whether to mock
      ‚Üí Œº ()
chdir sev d =
  mkIOLME sev IORead ([fmtT|chdir %T|] d) () (MonadIO.Directory.chdir d)

----------------------------------------

{- | Perform IO with the dir *temporarily* changed to a given directory. -}
inDir ‚à∑ ‚àÄ Œµ Œ¥ Œ± œâ Œº .
        (MonadIO Œº, DirAs Œ¥,AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
         HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
        Severity       -- ^ logging level
      ‚Üí Œ¥              -- ^ directory to work in
      ‚Üí Œ±              -- ^ value to return if mocked
      ‚Üí ExceptT Œµ IO Œ± -- ^ IO to perform in the given directory
      ‚Üí DoMock         -- ^ whether to mock
      ‚Üí Œº Œ±            -- ^ value returned by IO (or mock value)

inDir sev d mck_val io mck = do
  let log = [fmtT|indir %T|] d
      rlog ‚à∑ ùïã
      rlog = if DoMock ‚â° mck then "(indir RETURN)" else "indir RETURN"
  r ‚Üê mkIOLME sev IORead log mck_val (MonadIO.Directory.inDir d io) mck
  logIO sev (def & ioClass ‚ä¢ IORead & doMock ‚ä¢ mck) rlog
  return r

----------------------------------------

{- | Forcibly remove a file or directory (including any descendents). -}
nuke ‚à∑ ‚àÄ Œµ œÅ œâ Œº .
        (MonadIO Œº,
         AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
         MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ, HasDoMock œâ,
         AsFilePath œÅ, Printable œÅ) ‚áí
        Severity -- ^ logging level
      ‚Üí œÅ        -- ^ file/dir to remove
      ‚Üí DoMock   -- ^ whether to mock
      ‚Üí Œº ()
nuke sev d =
  mkIOLME sev IOWrite ([fmtT|nuke %T|] d) () (MonadIO.Directory.nuke d)

----------------------------------------

{- | Create a (single) directory.  Will error if the directory already exists
     (either as a directory or a file), or the parent directory does not exist
     or is not writable by the current user.
 -}
mkdir ‚à∑ ‚àÄ Œµ Œ¥ œâ Œº .
        (MonadIO Œº,
         AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
         MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ, HasDoMock œâ,
         DirAs Œ¥) ‚áí
        Severity -- ^ logging level
      ‚Üí Œ¥        -- ^ directory to create
      ‚Üí FileMode -- ^ permissions for the directory
      ‚Üí DoMock   -- ^ whether to mock
      ‚Üí Œº ()
mkdir sev d p =
  mkIOLME sev IOWrite ([fmtT|mkdir %T|] d) () (MonadIO.Directory.mkdir d p)

----------------------------------------

mkpath ‚à∑ ‚àÄ Œµ Œ¥ œâ Œº .
        (MonadIO Œº, MonadCatch Œº,
         AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
         MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ, HasDoMock œâ,
         DirAs Œ¥, HasParentMay Œ¥, HasParentMay (DirType Œ¥),
         DirType Œ¥ ~ DirType (DirType Œ¥), Œ¥ ~ DirType Œ¥) ‚áí
        Severity -- ^ logging level
      ‚Üí Œ¥        -- ^ directory to create
      ‚Üí FileMode -- ^ permissions for the directory
      ‚Üí DoMock   -- ^ whether to mock
      ‚Üí Œº ()
mkpath sev d p =
  mkIOLME sev IOWrite ([fmtT|mkpath %T|] d) () (MonadIO.Directory.mkpath d p)

----------------------------------------

_lstdr ‚à∑ ‚àÄ Œµ Œ¥ œâ Œº .
          (MonadIO Œº, DirAs Œ¥,
           AsIOError Œµ, Printable Œµ, MonadError Œµ Œº, HasCallStack,
           HasIOClass œâ, HasDoMock œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
         Severity ‚Üí [FilePath] ‚Üí Œ¥ ‚Üí DoMock ‚Üí Œº [FilePath]
_lstdr sev mck_val d do_mock = do
  let vmsg = ùïµ $ \ fps ‚Üí [ [fmt|'%T'|] fp | fp ‚Üê fps ]
      lstd = asIOError $ listDirectory (d ‚´• filepath)
  mkIOLMER sev IORead ([fmt|lstdr: '%T'|] d) vmsg mck_val lstd do_mock

----------

{-| List a directory's files & subdirs, along with their stat results. -}
lsdir ‚à∑ ‚àÄ Œµ Œµ' œÅ œâ Œº .
        (MonadIO Œº,
         ToDir œÅ, DirAs (AppendableFPathD œÅ),
         AppendableFPath œÅ, AppendableFPathF œÅ ~ RelFile, Printable (DirType œÅ),
         AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº, HasCallStack,
         AsIOError Œµ', Printable Œµ',
         HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
        Severity
      ‚Üí ([(œÅ, FStat)], [(DirType œÅ, FStat)], [(œÅ, Œµ')])
      ‚Üí AppendableFPathD œÅ
      ‚Üí DoMock
      ‚Üí Œº ([(œÅ, FStat)], [(DirType œÅ, FStat)], [(œÅ, Œµ')])

lsdir sev mck_val d do_mock = do
  let msg = [fmtT|lsdir '%T'|] d
      log_attr = def & ioClass ‚ä¢ IORead & doMock ‚ä¢ do_mock
      vmsg = ùïµ $ \(fs,ds,es) ‚Üí —é [ [ [fmtT|%T|] f | (f,_fstat) ‚Üê fs ]
                                 , [ [fmtT|%T|] d' | (d',_fstat) ‚Üê ds ]
                                 , [ [fmtT|¬´%T¬ª %T|] p e | (p,e) ‚Üê es ]
                                   ]

      sev' = succSafe sev

      go = do
        fns ‚Üê _lstdr sev' [] d do_mock
        xs ‚Üê sequence $ (fmap (d ‚´ª) ‚àò parse @RelFile) ‚ä≥ fns
        (foldr pathTypes ([],[],[]) ‚©∫ \ d' ‚Üí lstats sev' ùïπ d' do_mock) xs

  r ‚Üê mkIOLME sev IORead msg mck_val go  do_mock
  logResult sev log_attr do_mock msg vmsg (ùïΩ r)

--------------------

{-| Simplified version of `lsdir`, where the mock value is all empties; and
    the errors are logged with `warnIO` but not returned. -}

lsdir' ‚à∑ ‚àÄ Œµ œÅ œâ Œº .
         (MonadIO Œº,
          ToDir œÅ, DirAs (AppendableFPathD œÅ),
          AppendableFPath œÅ, AppendableFPathF œÅ ~ RelFile, Printable(DirType œÅ),
          AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,HasCallStack,
          HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
         Severity ‚Üí AppendableFPathD œÅ ‚Üí DoMock
       ‚Üí Œº ([(œÅ, FStat)], [(DirType œÅ, FStat)])

lsdir' sev d do_mock = do
  (fs,ds,es) ‚Üê lsdir @_ @IOError sev ([],[],[]) d do_mock
  forM_ es $ \ (f,e) ‚Üí
    -- like `MockIO.Log.warnIO`; but not a fixed MockIOClass to Log
    mkIOL Warning def ([fmtT|lsdir: '%T' ! %T|] f e) () (return ()) do_mock
  return (fs,ds)

-- that's all, folks! ----------------------------------------------------------
