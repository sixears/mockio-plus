module MockIO.Process
  ( CmdRW(..), (!), system, sys )
where

-- base --------------------------------

import Control.Monad.IO.Class  ( MonadIO )
import GHC.Stack               ( HasCallStack )

-- data-default ------------------------

import Data.Default  ( Default )

-- data-textual ------------------------

import Data.Textual  ( Printable )

-- fpath -------------------------------

import FPath.Error.FPathError  ( AsFPathError )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog, Severity )

-- mockio ------------------------------

import MockIO.DoMock  ( DoMock, HasDoMock )

-- mockio-log --------------------------

import MockIO.IOClass  ( HasIOClass )
import MockIO.Log      ( MockIOClass, mkIOLMER )

-- monaderror-io -----------------------

import MonadError.IO.Error  ( AsIOError )

-- monadio-plus ------------------------

import qualified  MonadIO.Process

import MonadIO.Error.CreateProcError  ( AsCreateProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError )
import MonadIO.Process.CmdSpec        ( CmdSpec )
import MonadIO.Process.ExitStatus     ( ExitStatus )
import MonadIO.Process.MakeProc       ( MakeProc )
import MonadIO.Process.OutputHandles  ( OutputHandles )
import MonadIO.Process.ToMaybeTexts   ( ToMaybeTexts )

-- more-unicode ------------------------

import Data.MoreUnicode.Lens   ( (‚ä£) )
import Data.MoreUnicode.Maybe  ( pattern ùïµ )
import Data.MoreUnicode.Text   ( ùïã )

-- mtl ---------------------------------

import Control.Monad.Except  ( MonadError )

-- tfmt --------------------------------

import Text.Fmt  ( fmtT )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import MockIO.Process.CmdRW          ( CmdRW( CmdR, CmdW ), ioc )
import MockIO.Process.MLCmdSpec      ( HasMLCmdSpec( cmdspec, cmdrw, mock
                                                   , mock_value, severity )
                                     , MLCmdSpec
                                     )
import MockIO.Process.MLMakeIStream  ( MLMakeIStream( makeIStream ) )

--------------------------------------------------------------------------------

{- | Execute an external process, wait for termination, return exit status and
     whichever of stderr/stdout were implicitly requested by the return type. -}
system' ‚à∑ ‚àÄ Œµ Œ∂ Œæ œÉ œâ Œº .
          (MonadIO Œº,
           AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ, AsProcExitError Œµ,
           Printable Œµ, MonadError Œµ Œº, HasCallStack,
           ToMaybeTexts Œæ, OutputHandles Œ∂ Œæ, MakeProc Œ∂, MLMakeIStream œÉ,
           HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
          Severity        -- ^ Severity at which to log action
        ‚Üí CmdRW           -- ^ Whether this is an 'active' or 'passive' command
        ‚Üí (ExitStatus, Œæ) -- ^ Dummy return values for when mocked
        ‚Üí œÉ               -- ^ stdin specification
        ‚Üí CmdSpec         -- ^ cmd + args
        ‚Üí DoMock          -- ^ whether to mock this invocation
        ‚Üí Œº (ExitStatus, Œæ)

system' sev rw mck_val inh cspec mck = do
  inh' ‚Üê makeIStream sev inh mck
  let msg          = [fmtT|<CMD> %T|] cspec
      msgR         ‚à∑ (ExitStatus, Œæ) ‚Üí [ùïã]
      msgR (ex, _) = [[fmtT|exit: %T|] ex]
      doSystem     = MonadIO.Process.system inh' cspec
  mkIOLMER sev (ioc rw) msg (ùïµ msgR) mck_val doSystem mck

system ‚à∑ ‚àÄ Œµ Œ∂ Œæ œÉ Œº .
         (MonadIO Œº,
          AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ, AsProcExitError Œµ,
          Printable Œµ, MonadError Œµ Œº, HasCallStack,
          ToMaybeTexts Œæ, OutputHandles Œ∂ Œæ, MakeProc Œ∂, MLMakeIStream œÉ,
          MonadLog (Log MockIOClass) Œº) ‚áí
         Severity        -- ^ Severity at which to log action
       ‚Üí CmdRW           -- ^ Whether this is an 'active' or 'passive' command
       ‚Üí (ExitStatus, Œæ) -- ^ Dummy return values for when mocked
       ‚Üí œÉ               -- ^ stdin specification
       ‚Üí CmdSpec         -- ^ cmd + args
       ‚Üí DoMock          -- ^ whether to mock this invocation
       ‚Üí Œº (ExitStatus, Œæ)
system = system'

{-
Œª> :m + Control.Monad.Log MonadIO.Process.ExitStatus FPath.AbsFile
        MockIO.OpenFile MonadIO.Process.CmdSpec MockIO MonadError Data.Function
        MonadIO.Error.CreateProcError Data.Either MockIO.Log
Œª> let cspec = mkCmd [absfile|/run/current-system/sw/bin/grep|]
                     ["martyn","/etc/group"]
Œª> logit' $ splitMError @ProcError @(Either _)
          $ system Notice CmdR (ExitVal 0, ()) [absfile|/dev/null|] cspec NoMock
-}

{- | Like `system`, but collects all of the cmd specification (including mock /
     log bits) into MLCmdSpec. -}
sys' ‚à∑ ‚àÄ Œµ Œ∂ Œæ œÉ œâ Œº .
       (MonadIO Œº,
        AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ, AsProcExitError Œµ,
        Printable Œµ, MonadError Œµ Œº, HasCallStack,
        ToMaybeTexts Œæ, OutputHandles Œ∂ Œæ, MakeProc Œ∂, MLMakeIStream œÉ,
        HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
       œÉ ‚Üí MLCmdSpec Œæ ‚Üí Œº (ExitStatus, Œæ)
sys' inh mlc = system' (mlc ‚ä£ severity) (mlc ‚ä£ cmdrw) (mlc ‚ä£ mock_value) inh
                       (mlc ‚ä£ cmdspec) (mlc ‚ä£ mock)

sys ‚à∑ ‚àÄ Œµ Œ∂ Œæ œÉ Œº .
      (MonadIO Œº,
       AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ, AsProcExitError Œµ,
       Printable Œµ, MonadError Œµ Œº, HasCallStack,
       ToMaybeTexts Œæ, OutputHandles Œ∂ Œæ, MakeProc Œ∂, MLMakeIStream œÉ,
       MonadLog (Log MockIOClass) Œº) ‚áí
      œÉ ‚Üí MLCmdSpec Œæ ‚Üí Œº (ExitStatus, Œæ)
sys = sys'
{-

Œª> :m + FPath.AbsFile MonadIO.Error.CreateProcError Data.Either Data.Text
        Control.Monad.Log MockIO MonadError Data.Function MockIO.Log

Œª> let mlc = mkMLCmd Notice CmdR [absfile|/run/current-system/sw/bin/grep|]
                                 ["martyn","/etc/group"] NoMock

Œª> logit' $ splitMError @ProcError @(Either _)
          $ sys @_ @_ @Text [absfile|/dev/null|] mlc

------------------------------------------------------------

Œª> :m + FPath.AbsFile MonadIO.Error.CreateProcError Data.Either Data.Text
        Control.Monad.Log MockIO MonadError Data.Function MockIO.Log
        MockIO.Process.MLCmdSpec

Œª> let mlc = mkMLCmdR [absfile|/run/current-system/sw/bin/grep|]
                      ["martyn","/etc/group"] NoMock & expExitVal <& 1

Œª> Right (Right (ev,(t::Text))) <- logit' $ splitMError @ProcError @(Either _)
                                          $ [absfile|/dev/null|] ! mlc

Œª> Data.Text.IO.putStrLn t

-}

(!) ‚à∑ ‚àÄ Œµ Œ∂ Œæ œÉ Œº .
      (MonadIO Œº,
       AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ, AsProcExitError Œµ,
       Printable Œµ, MonadError Œµ Œº, HasCallStack,
       ToMaybeTexts Œæ, OutputHandles Œ∂ Œæ, MakeProc Œ∂, MLMakeIStream œÉ,
       MonadLog (Log MockIOClass) Œº) ‚áí
      œÉ ‚Üí MLCmdSpec Œæ ‚Üí Œº (ExitStatus, Œæ)
(!) = sys

-- that's all, folks! ----------------------------------------------------------
